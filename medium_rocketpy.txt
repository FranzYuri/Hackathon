https://medium.com/@Oprojetojupiter/rocketpy-uma-inova%C3%A7%C3%A3o-multifuncional-no-ramo-do-foguetemodelismo-6e3c36310f95

RocketPy: uma inovação multifuncional no ramo do foguetemodelismo
O que é?

O RocketPy é um programa de simulação da trajetória de foguetes. Foi desenvolvido desde seu ponto inicial por membros do próprio Projeto Jupiter a fim de criar um modelo de simulação capaz de enviar dados mais precisos sobre as condições do foguete durante toda sua trajetória de voo, em relação aos oferecidos pelos códigos utilizados pelo time até então.
Criado em linguagem Python, o código foi crescendo e se aperfeiçoando conforme as necessidades e colaboração dos membros e seus projetos. Atualmente, ele consegue importar dados de previsões meteorológicas para considerar ventos, pressão e demais condições na atmosfera de lançamento; plotar gráficos da curva de empuxo do motor, da variação de massa pelo tempo, da trajetória, dentre outros; além de oferecer dados sobre a ejeção do sistema de recuperação, a velocidade de saída do trilho, o apogeu e até mesmo as elipses de dispersão.
Como exemplo de implementação, pode-se citar o lançamento do foguete Calisto, realizado em 2019 pela equipe do Projeto Jupiter na Spaceport America Cup. Nele, as simulações do RocketPy forneceram uma previsão do apogeu com uma taxa de erro de apenas 2.9%: o apogeu simulado foi de 2893 m, enquanto o medido foi de 2811 m. Além disso, nesse mesmo ano, o Jupiter lançou o foguete Valetudo na Latin American Space Challenge e o apogeu simulado apresentou uma taxa de erro ainda menor em relação ao real: o apogeu previsto foi de 849 m e o alcançado foi de 872 m, ou seja, uma diferença de 2.6%.

Como funciona?

Simular uma trajetória não é uma atividade exatamente simples, pois você está lidando com um sistema de massa variável e deve considerar não somente a curva de empuxo do motor como as condições atmosféricas do local, as incertezas e imprecisões de um projeto, entre outros. 
Como o RocketPy lida com esses problemas? De uma forma geral, o código se estrutura em volta de 4 classes: environment, solid motor, rocket e flight. A primeira trata do ambiente de lançamento, onde define-se o comprimento do trilho de lançamento, as coordenadas, a elevação do local e o modelo atmosférico, obtendo informações a partir da importação de dados de previsões meteorológicas. Assim obtém-se dados importantíssimos para precisão da simulação, como a velocidade do vento na superfície, a velocidade do som e a densidade do ar, todos em função da altitude. 
Com o ambiente definido, é o momento de se dedicar aos dados do motor. Nessa classe utilizam-se dados da curva de empuxo, o tempo de queima e a quantidade de grãos (com suas propriedades geométricas, sua densidade e a distância entre cada um deles). Assim, obtém-se dados sobre as propriedades do motor - velocidade de exaustão, empuxo máximo, empuxo total, dentre outros - em gráficos que variam em função do tempo.
Na classe rocket, cria-se o foguete em si, dando seu comprimento, sua massa, seu momento de inércia, as curvas de arrasto sobre o foguete, a ogiva e as aletas. Também é nessa classe que são inseridos os dados sobre o sistema de recuperação, especialmente o tipo de paraquedas e seus coeficientes, além da função em que determina a ativação do sistema de ejeção.
Neste momento está tudo pronto para definir o voo, e assim conseguimos dados cruciais da trajetória: o apogeu, velocidade de saída do trilho, velocidade de ejeção dos paraquedas, o gráfico 3D da trajetória, velocidades angulares e inúmeros detalhes da situação de voo. Vale ressaltar que esse cronograma de simulação mencionado é o básico do código. O RocketPy é capaz de simular alguns estudos - como um gráfico de diversas interações de margens estáticas para analisar a estabilidade do foguete e um gráfico de análise do apogeu em função da massa.

Benefícios pro projeto 

Um dos maiores benefícios que o código traz é a sua flexibilidade. Ele é capaz de de integrar várias outras funções além da simulação da trajetória - a exemplo dos gráficos de estudo citados - e também de interagir com outras ferramentas e até mesmo outros códigos. 
Outro ponto é a sua velocidade: o RocketPy é um código ágil. A intenção é realmente ter um programa fácil de rodar para que se possa fazer diversas interações a fim de determinar a trajetória mais otimizada possível. Além disso, algo a se destacar é a precisão dos resultados. O programa considera todos os seis graus de liberdade do foguete, o sistema de massa variável, além de importar dados atmosféricos reais para seus cálculos de ambiente e dados aerodinâmicos externos. Isso resulta em uma margem de erro baixa para um programa com tantas entradas.

Planos pro futuro 

O RocketPy é um programa bem otimizado e atualmente é utilizado por pessoas de vários lugares do mundo, como Índia, Alemanha e Estados Unidos, mas sempre há a possibilidade de crescer. A intenção é que ele se desenvolva cada vez mais, com um envolvimento de mais programadores - especialmente membros do Projeto - e chegue ainda mais longe. O código já tem seu repositório no GitHub e conta com 21 forks e 4 contribuidores. Com o  objetivo de aumentar o número de contribuidores e, também, a visibilidade do projeto, organizou-se uma Hackathon de 14 à 16 de agosto com os membros do Projeto Jupiter e é de se esperar que haja um crescimento ainda maior para o programa no futuro próximo.
